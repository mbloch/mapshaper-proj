#!/usr/bin/env node

var opts = require('./src/cli/parse_args.js')()
  .option('f', {
    type: 'flag'
  })
  .option('m', {
    type: 'flag' // minimal build
  })
  .parse(process.argv.slice(2));

var fs = require('fs');
var _ = require('underscore');
var path = require('path');
var ifile = opts.m ? 'src/proj-minimal.js' : 'src/proj.js';
var deps, ofile;

if (opts._.length > 0) {
  deps = getRequestedDeps(opts._[0].split(','));
}

if (opts.m) {
  ofile = "mproj-minimal.js";
} else if (deps) {
  ofile = "mproj-custom.js";
} else {
  ofile = "mproj.js";
}

if (!deps) {
  deps = getAllDeps();
}

require("catty")({follow: !!opts.f})
  .addLibrary("src")
  .addLibrary("node_modules/geographiclib/src")
  .addDeps(deps)
  .cat(ifile, "dist/" + ofile);

function getRequestedDeps(projs) {
  var index = {};
  var deps = [];
  var missing = [];
  getAllDeps().forEach(function(name) {
    findProjNames(name, index);
  });
  projs.forEach(function(proj) {
    if (proj in index) {
      deps.push(index[proj]);
    } else {
      missing.push(proj);
    }
  });
  if (missing.length > 0) {
    console.error("Missing:", missing.join(','));
    process.exit(1);
  }
  return _.uniq(deps).join(',');
}

function getAllDeps() {
  var deps = fs.readdirSync('src/projections').map(function(f) {
    var match = /(.*)\.js$/.exec(f);
    return match ? match[1] : null;
  });
  return _.compact(deps);
}

function findProjNames(fileName, index) {
  var argsRx = /pj_add\(([^;]+)/g;
  var trimRx = /['"\s]/g;
  var filePath = path.join('src/projections', fileName + '.js');
  var js = fs.readFileSync(filePath, 'utf8');
  var args, m;
  while (m = argsRx.exec(js)) {
    args = m[1].split(',');
    index[args[1].replace(trimRx, '')] = fileName;
  }
}
